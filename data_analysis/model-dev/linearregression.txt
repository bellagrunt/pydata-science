Linear and Multiple linear regression

- linear regression will refer to one independent variable to make a prediction
Independent variable > prediction

- Multiple linear regression will refer to Multiple independent variables to make a prediction
Multiple independent variables > prediction

Simple linear regression
- 1. The predictor (independent) variable - x
- 2. The target (dependent) variable - y
y = b0 + b1x
- b0 : the intercept
- b1 : the slope

Simple linear regression: prediction
y = 38423 - 821x
= 38423 - 821 (20)
= 22003

Fit 
(b0, b1)
Predict model
y = b0 + b1x

-------------------------

Fitting a simple linear model estimator in python:
X : predictor variable
Y : Target variable 

1. import linear_model from scikit-learn
    from sklearn.linear_model import LinearRegression

2. create a linear regression object using the constructor :
    lm=LinearRegression()

Define the predictor variable and target variable
X = df[('highway-mpg')]
Y = df[('price')]

Then use lm.fit(X, Y) to fit the model, fine the parameters b0 and b1
lm.fit(X, Y)

Obtain a prediction
Yhat = lm.predict(x)

-----------------

SLR Estimated Linear regression
- intercept(b0): lm.intercept_38423.305858
- slope(b1): lm.coef_-821.73337832

Relationship between price and highway-mpg is given by:
price = 38423.31 - 821.73 * highway-mpg


-------------------------------------------------------

Multiple linear regression (MLR)
- This method is used to explain Relationship between:
1. One continuous target (y) variable
2. Two or more predictor (x) variables
Y = b0 + b1x1 + b2x2 + b3x3 + b4x4

b0 : intercept (X = 0)
b1 : coefficient or parameter of x1
y = 1 + 2x1 + 3x2


Fitting a Multiple linear model estimator
1. Can extract the for 4 predictor variables and store them in variable Z
z = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']]

2. train the model as before
lm.fit(z, df['price'])

3. obtain a prediction
Yhat=lm.predict(X)

1. Find the intercept (b0)
2. Find the coefficient (b1, b2, b3, b4)
