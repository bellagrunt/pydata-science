Polynomial regression and pipelines

- special case of the general linear regression model
- useful for describing curvilinear relationships

Curvilinear relationships :
- By squaring or setting higher-order terms of the 
predictor variables

Polynomial Regression 
- quadratic - 2nd order
Y = b0 + b1x1 + b2(x1)2

- cubic - 3rd order
Y = b0 + b1x1+b2(x1)2 + b3(x1)3

Higher order

1. Calculate Polynomial of 3rd order
f=np.polyfit(x,y,3)
p=np.polydl(f)
2. Print the model out
print(p)

* Can also have multi dimensional polynomial linear regression
- use scikit-learn for preprocessing
from sklearn.preprocessing import PolynomialFeatures
pr=PolynomialFeatures(degree=2)
x_polly=pr.fit_transform(x[['horsepower', 'curb-weight'], include_bias=False])


pr=pr=PolynomialFeatures(degree=2)
pr.fit_transform([1, 2], include_bias=False)

** Pre-preprocessing
- Can normalize each feature simultaneously
from sklearn.preprocessing import StandardScaler
// train the object
SCALE=StandardScaler()
// fit the scale object
SCALE.fit(x_data[['horsepower', 'highway-mpg']])
// transform >
x_scale=SCALE.transform(x_data[['horsepower', 'highway-mpg']])


** Pipelines **
- normalization > polynomial transform > linear regression
normalization | polynomial transform = transformations
linear regression = predictions

Python:
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Pipeline

// create a list of tuples
Input=[('scale', StandardScaler()), ('polynomial', PolynomialFeatures(degree=2),_('mode', LinearRegression))]

Train the pipeline:
Pipe.train(x['horsepower', 'curb_weight', 'engine-size', 'highway-mpg'], y)